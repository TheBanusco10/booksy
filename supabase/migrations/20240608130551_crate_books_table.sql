create type "public"."status" as enum ('reading', 'paused', 'finished');

create type "public"."type" as enum ('paper', 'kindle');

create table "public"."books" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "title" text default ''::text,
    "description" text default ''::text,
    "author" text default ''::text,
    "image_url" text default ''::text,
    "number_pages" smallint default '0'::smallint,
    "type" type default 'paper'::type,
    "status" status default 'reading'::status,
    "categories" text[],
    "user_id" uuid default auth.uid(),
    "score" smallint default '0'::smallint
);


alter table "public"."books" enable row level security;

CREATE UNIQUE INDEX books_pkey ON public.books USING btree (id);

alter table "public"."books" add constraint "books_pkey" PRIMARY KEY using index "books_pkey";

alter table "public"."books" add constraint "books_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."books" validate constraint "books_user_id_fkey";

create policy "Enable all actions for users based on user_id"
on "public"."books"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));
